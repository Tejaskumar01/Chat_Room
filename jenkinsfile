def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger'
    ]
pipeline {
    agent { label 'slave' } // change to 'master' if you want to run on master
    tools{
        maven 'mvn'
    }
     environment {
        SCANNER_HOME = tool 'sonar-scanner'
        IMAGE_NAME = "tejaskumar01/chatroom" // Name of the image created in Jenkins
        CONTAINER_NAME = "chat_room" 
        
             }
    stages {
        stage('clean worspace') {
        steps {
           cleanWs()
           }
        }
        stage('git checkout') {
            steps {
             git 'https://github.com/Tejaskumar01/Chat_Room.git'
            }
        }
         stage('compile') {
            steps {
              sh 'mvn compile'
            }
        }
         stage('code-analysis') {
            steps {
              withSonarQubeEnv('sonar-server') {
               sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Chat_Room \
               -Dsonar.java.binaries=. \
               -Dsonar.projectKey=Chat_Room'''
              }
            }
        }
         stage('OWASP FS SCAN') {
            steps {
                withCredentials([string(credentialsId: 'nvd_cred', variable: 'NVD_KEY')]) {
                   dependencyCheck additionalArguments: "--scan ./ --disableYarnAudit --disableNodeAudit --nvdApiKey ${NVD_KEY}", odcInstallation: 'DP-Check'
             }
            dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('TRIVY FS SCAN') {
            steps {
                sh 'trivy fs . > trivy_scan.txt'
            }
        }

        stage('package') {
            steps {
              sh 'mvn install'
            }
        }
        stage('Clean Up Docker Resources') {
            steps {
                script {
                    // Remove the specific container
                    sh '''
                    if docker ps -a --format '{{.Names}}' | grep -q $CONTAINER_NAME; then
                        echo "Stopping and removing container: $CONTAINER_NAME"
                        docker stop $CONTAINER_NAME
                        docker rm $CONTAINER_NAME
                    else
                        echo "Container $CONTAINER_NAME does not exist."
                    fi
                    '''

                    // Remove the specific image
                    sh '''
                    if docker images -q $IMAGE_NAME; then
                        echo "Removing image: $IMAGE_NAME"
                        docker rmi -f $IMAGE_NAME
                    else
                        echo "Image $IMAGE_NAME does not exist."
                    fi
                    '''
                }
            }
        }

         stage('docker build') {
            steps {
             script {
                    sh 'docker build -t $IMAGE_NAME .'
              }
            }
        }
         stage("TRIVY"){
            steps{
                sh 'trivy image $IMAGE_NAME' 
            }
        }

         stage('docker push') {
            steps {
             script {
                 withDockerRegistry(credentialsId: 'docker-cred') {
                       sh 'docker push $IMAGE_NAME'
                  }
              }
            }
         }    
        stage('docker container') {
            steps {
             script {
                
                    sh 'docker run -itd --name $CONTAINER_NAME -p 8123:8080 $IMAGE_NAME'
                 
              }
            }
        }

    }	
 
    post {
        always {
            echo 'slack Notification.'
            slackSend channel: '#p1',
            color: COLOR_MAP [currentBuild.currentResult],
            message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URl}"
            
        }
    }
}